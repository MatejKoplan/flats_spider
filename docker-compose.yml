version: '3.8'

services:
  flask-app:
    build:
      context: ./flats_project
      dockerfile: Dockerfile_flask
    container_name: flask_container
    ports:
      - "8080:5000"
    env_file:
      - .env
    environment:
      FLASK_APP: ${FLASK_APP}
      FLASK_ENV: ${FLASK_ENV}
      POSTGRES_HOST: "postgres-db"
      ENVIRONMENT: production
    networks:
      - app-network
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres-db:
    build: ./postgres
    container_name: postgres_container
    volumes:
      - postgres-data:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - app-network
    ports:
      - "5432:5432"  # Development only
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    restart: always
    environment:
      ADMINER_DEFAULT_SERVER: postgres-db
    ports:
      - "8000:8080"
    networks:
      - app-network
    depends_on:
      - postgres-db

  spider:
    build:
      context: ./flats_project
      dockerfile: Dockerfile_spider
    container_name: scrapy_spider
    env_file:
      - .env
    environment:
      POSTGRES_HOST: "postgres-db"
      ENVIRONMENT: production
    networks:
      - app-network
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    depends_on:
      - postgres-db

networks:
  app-network:

volumes:
  postgres-data: